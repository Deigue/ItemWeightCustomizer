using System;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Synthesis;
using Mutagen.Bethesda.Skyrim;
using System.IO;
using System.Linq;
using Newtonsoft.Json;
using Noggog;
using static Mutagen.Bethesda.FormKeys.SkyrimSE.Skyrim.Keyword;
using System.Threading.Tasks;

namespace ItemWeightCustomizer
{
    public static class Program
    {
        static ModKey Campfire = ModKey.FromNameAndExtension("Campfire.esm");
        private static readonly (string Key, uint Id) isCampfireTentItem = ("isCampfireTentItem", 0x03AB3C);
        static Lazy<Settings> LazySettings = new();
        private static Settings Settings { get; set; } = null!;

        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance.AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .SetAutogeneratedSettings(nickname: "Settings", path: "config.json", out LazySettings)
                .SetTypicalOpen(GameRelease.SkyrimSE, new ModKey("RealisticWeights.esp", ModType.Plugin))
                .Run(args);
        }
        private static void SynthesisLog(string message, bool special = false)
        {
            if (special)
            {
                Console.WriteLine();
                Console.Write(">>> ");
            }

            Console.WriteLine(message);
            if (special) Console.WriteLine();
        }

        private static float? FindWeightCategory(string withType, string? editorId)
        {
            if (editorId is null) return null;
            WeightCategory? category = Settings.Categories.FirstOrDefault(x => x.Types.Contains(withType));
            if (category == null || !category.EditorIds.Contains(editorId)) return null;
            SynthesisLog($"{editorId} matches the \"{category.Name}\" category, using weight {category.Weight}");
            return category.Weight;
        }

        private static bool? FindItemType(string[] types, string? editorID)
        {
            foreach (string type in types)
            {
                if (editorID?.Contains(type, StringComparison.OrdinalIgnoreCase) ?? true)
                    {
                        return true;
                    }

            }
            return false;
        }

        private static bool ActionableCategoryExists(string type)
        {
            return Settings.Categories.Any(c => c.Types.Contains(type) && c.Weight >= 0);
        }

        private static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            var configFilePath = Path.Combine(state.ExtraSettingsDataPath, "config.json");
            string errorMessage;

            if (!File.Exists(configFilePath))
            {
                errorMessage = "Cannot find config.json for Custom Weights.";
                SynthesisLog(errorMessage);
                throw new FileNotFoundException(errorMessage, configFilePath);
            }
            try
            {
                Settings = JsonConvert.DeserializeObject<Settings>(File.ReadAllText(configFilePath), new JsonSerializerSettings { NullValueHandling = NullValueHandling.Ignore })!;
            }
            catch (JsonSerializationException jsonException)
            {
                errorMessage = "Failed to Parse config.json, please review the format.";
                SynthesisLog(errorMessage);
                throw new JsonSerializationException(errorMessage, jsonException);
            }


            var weights = Settings.WeightSettings;
            var bookWeight = weights.Books;
            var notesWeight = weights.Notes;
            var ingredientWeight = weights.Ingredients;
            var scrollWeight = weights.Scrolls;
            var soulGemWeight = weights.Soulgems;
            var armorWeight = weights.Armors;
            var lightCuirassesWeight = weights.LightCuirasses;
            var lightOthersWeight = weights.LightOthers;
            var clothesBodyWeight = weights.ClothesBody;
            var clothesFeetWeight = weights.ClothesFeet;
            var clothingCircletsWeight = weights.ClothingCirclets;
            var jewelsWeight = weights.Jewels;
            var weaponWeight = weights.Weapons;
            var foodWeight = weights.Foods;
            var winesBrandysWeight = weights.WinesBrandys;
            var alesMeadsWeight = weights.AlesMeads;
            var breadsFloursWeight = weights.BreadsFlours;
            var vegetablesWeight = weights.Vegetables;
            var soupsWeight = weights.Soups;
            var meatsWeight = weights.Meats;
            var seafoodsWeight = weights.SeaFoods;
            var drinksWeight = weights.Drinks;
            var potionWeight = weights.Potions;
            var ingotWeight = weights.Ingots;
            var gemWeight = weights.Gems;
            var toolsWeight = weights.Tools;
            var tentsWeight = weights.Tents;
            var silverwareWeight = weights.Silverware;
            var emptyBottlesWeight = weights.EmptyBottles;
            var animalPeltsWeight = weights.AnimalPelts;
            var animalPartWeight = weights.AnimalParts;
            var animalHideWeight = weights.AnimalHides;
            var clutterWeight = weights.Clutter;
            var miscWeight = weights.MiscItems;

            // ***** PRINT CONFIG SETTINGS ***** //
            SynthesisLog("Item Weight Configuration:", true);
            if (bookWeight >= 0)
                SynthesisLog($"BOOKS will have their weights multiplied by {bookWeight}");
            if (notesWeight >= 0) SynthesisLog($"NOTES, JOURNALS, RECIPES will have their weights multiplied by {notesWeight}");
            if (ingredientWeight >= 0)
                SynthesisLog($"INGREDIENTS will have their weights multiplied by {ingredientWeight}");
            if (scrollWeight >= 0) SynthesisLog($"SCROLLS will have their weights multiplied by {scrollWeight}");
            if (soulGemWeight >= 0)
                SynthesisLog($"SOUL GEMS will have their weights multiplied by {soulGemWeight}");
            if (armorWeight >= 0) SynthesisLog($"ARMOURS will have their weights multiplied by {armorWeight}");
            if (lightCuirassesWeight >= 0) SynthesisLog($"LIGHT ARMOUR CUIRASSES will have their weights multiplied by {lightCuirassesWeight}");
            if (lightOthersWeight >= 0) SynthesisLog($"LIGHT ARMOUR will have their weights multiplied by {lightOthersWeight}");
            if (clothesBodyWeight >= 0) SynthesisLog($"BODY CLOTHING will have their weights multiplied by {clothesBodyWeight}");
            if (clothesFeetWeight >= 0) SynthesisLog($"FEET CLOTHING will have their weights multiplied by {clothesFeetWeight}");
            if (clothingCircletsWeight >= 0) SynthesisLog($"CIRCLETS will have their weights multiplied by {clothingCircletsWeight}");
            if (jewelsWeight >= 0) SynthesisLog($"JEWELRY will have their weights multiplied by {jewelsWeight}");
            if (weaponWeight >= 0) SynthesisLog($"WEAPONS will have their weights multiplied by {weaponWeight}");
            if (foodWeight >= 0) SynthesisLog($"FOODS will have their weights multiplied by {foodWeight}");
            if (winesBrandysWeight >= 0) SynthesisLog($"WINES, BRANDYS will have their weights multiplied by {winesBrandysWeight}");
            if (alesMeadsWeight >= 0) SynthesisLog($"ALES, MEADS will have their weights multiplied by {alesMeadsWeight}");
            if (breadsFloursWeight >= 0) SynthesisLog($"BREADS, FLOURS will have their weights multiplied by {breadsFloursWeight}");
            if (vegetablesWeight >= 0) SynthesisLog($"VEGETABLE SOUPS will have their weights multiplied by {vegetablesWeight}");
            if (soupsWeight >= 0) SynthesisLog($"SOUPS will have their weights multiplied by {soupsWeight}");
            if (meatsWeight >= 0) SynthesisLog($"MEATS will have their weights multiplied by {meatsWeight}");
            if (seafoodsWeight >= 0) SynthesisLog($"SEAFOODS will have their weights multiplied by {seafoodsWeight}");
            if (drinksWeight >= 0) SynthesisLog($"DRINKS will have their weights multiplied by {drinksWeight}");
            if (potionWeight >= 0) SynthesisLog($"POTIONS will have their weights multiplied by {potionWeight}");
            if (ingotWeight >= 0) SynthesisLog($"INGOTS will have their weights multiplied by {ingotWeight}");
            if (gemWeight >= 0) SynthesisLog($"GEMS will have their weights multiplied by {gemWeight}");
            if (toolsWeight >= 0) SynthesisLog($"TOOLS will have their weights multiplied by {toolsWeight}");
            if (tentsWeight >= 0) SynthesisLog($"TENTS will have their weights multiplied by {tentsWeight}");
            if (silverwareWeight >= 0) SynthesisLog($"SILVERWARE will have their weights multiplied by {silverwareWeight}");
            if (emptyBottlesWeight >= 0) SynthesisLog($"EMPTY BOTTLES will have their weights multiplied by {emptyBottlesWeight}");
            if (animalPeltsWeight >= 0) SynthesisLog($"ANIMAL PELTS will have their weights multiplied by {animalPeltsWeight}");
            if (animalPartWeight >= 0) SynthesisLog($"ANIMAL PARTS will have their weights multiplied by {animalPartWeight}");
            if (animalHideWeight >= 0) SynthesisLog($"ANIMAL HIDES will have their weights multiplied by {animalHideWeight}");
            if (clutterWeight >= 0) SynthesisLog($"CLUTTER will have their weights multiplied by {clutterWeight}");
            if (miscWeight >= 0) SynthesisLog($"MISCELLANEOUS ITEMS will have their weights multiplied by {miscWeight}");

            Settings.Categories.Where(c => c.Weight >= 0).ForEach(c =>
                SynthesisLog($"\"{c.Name}\" category matches will have their weights set to {c.Weight}"));

            // START WORK ...
            SynthesisLog("Running Item Weight Customizer ...", true);

            // ***** BOOKS ***** //
            if (bookWeight >= 0 || ActionableCategoryExists("books")|| 
                notesWeight >= 0 || ActionableCategoryExists("notes"))
            {
                string[] lightBooks = { "note", "journal", "letter" };

                foreach (IBookGetter book in state.LoadOrder.PriorityOrder.WinningOverrides<IBookGetter>())
                {
                    var newWeight = FindWeightCategory("book", book.EditorID) ?? bookWeight;
                    if (FindItemType(lightBooks, book.EditorID) ?? true)
                    {
                        newWeight = FindWeightCategory("notes", book.EditorID) ?? notesWeight;
                    }
                    if (newWeight < 0 || newWeight == book.Weight) continue;
                    if (Math.Abs(book.Weight - newWeight) < float.Epsilon) continue;
                    var modifiedBook = state.PatchMod.Books.GetOrAddAsOverride(book);
                    modifiedBook.Weight *= newWeight;
                }
            }

            // ***** INGREDIENTS ***** //
            if (ingredientWeight >= 0 || ActionableCategoryExists("ingredients"))
            {
                foreach (IIngredientGetter ingredient in state.LoadOrder.PriorityOrder
                    .WinningOverrides<IIngredientGetter>())
                {
                    var newWeight = FindWeightCategory("ingredients", ingredient.EditorID) ?? ingredientWeight;
                    if (newWeight < 0 || newWeight == ingredient.Weight) continue;
                    if (Math.Abs(ingredient.Weight - newWeight) < float.Epsilon) continue;
                    var modifiedIngredient = state.PatchMod.Ingredients.GetOrAddAsOverride(ingredient);
                    modifiedIngredient.Weight *= newWeight;
                }
            }

            // ***** SCROLLS ***** //
            if (scrollWeight >= 0 || ActionableCategoryExists("scrolls"))
            {
                foreach (IScrollGetter scroll in state.LoadOrder.PriorityOrder.WinningOverrides<IScrollGetter>())
                {
                    var newWeight = FindWeightCategory("scrolls", scroll.EditorID) ?? scrollWeight;
                    if (newWeight < 0 || newWeight == scroll.Weight) continue;
                    if (Math.Abs(scroll.Weight - newWeight) < float.Epsilon) continue;
                    var modifiedScroll = state.PatchMod.Scrolls.GetOrAddAsOverride(scroll);
                    modifiedScroll.Weight *= newWeight;
                }
            }

            // ***** SOUL GEMS ***** //
            if (soulGemWeight >= 0 || ActionableCategoryExists("soulgems"))
            {
                foreach (ISoulGemGetter soulGem in state.LoadOrder.PriorityOrder.WinningOverrides<ISoulGemGetter>())
                {
                    var newWeight = FindWeightCategory("soulgems", soulGem.EditorID) ?? soulGemWeight;
                    if (newWeight < 0 || newWeight == soulGem.Weight) continue;
                    if (Math.Abs(soulGem.Weight - newWeight) < float.Epsilon) continue;
                    var modifiedSoulGem = state.PatchMod.SoulGems.GetOrAddAsOverride(soulGem);
                    modifiedSoulGem.Weight *= newWeight;
                }
            }

            // ***** ARMOURS ***** //
            if (armorWeight >= 0 || ActionableCategoryExists("armors") ||
                lightCuirassesWeight >= 0 || ActionableCategoryExists("lightCuirasses") ||
                lightOthersWeight >= 0 || ActionableCategoryExists("lightOthers") ||
                jewelsWeight >= 0 || ActionableCategoryExists("jewels") ||
                clothingCircletsWeight >= 0 || ActionableCategoryExists("clothingCirclets") ||
                clothesFeetWeight >= 0 || ActionableCategoryExists("clothesFeet") ||
                clothesBodyWeight >= 0 || ActionableCategoryExists("clothesBody")
                )
            {
                foreach (IArmorGetter armor in state.LoadOrder.PriorityOrder.WinningOverrides<IArmorGetter>())
                {
                    var newWeight = FindWeightCategory("armors", armor.EditorID) ?? armorWeight;
                    // Armor Types: 0 = light, 1 = heavy, 2 = cloth
                    if (armor.BodyTemplate?.ArmorType == ArmorType.LightArmor)
                    {
                        if (armor.Keywords?.Any(link => link.FormKey.Equals(ArmorCuirass.FormKey)) ?? false) { newWeight = FindWeightCategory("lightCuirasses", armor.EditorID) ?? lightCuirassesWeight; }
                        else { newWeight = FindWeightCategory("lightOthers", armor.EditorID) ?? lightOthersWeight; }
                    }
                    if (armor.BodyTemplate?.ArmorType == ArmorType.Clothing)
                    {
                        if (armor.Keywords?.Any(link => link.FormKey.Equals(ArmorJewelry.FormKey)) ?? false) { newWeight = FindWeightCategory("jewels", armor.EditorID) ?? jewelsWeight; }
                        if (armor.Keywords?.Any(link => link.FormKey.Equals(ClothingCirclet.FormKey)) ?? false) { newWeight = FindWeightCategory("clothingCirclets", armor.EditorID) ?? clothingCircletsWeight; }
                        if (armor.Keywords?.Any(link => link.FormKey.Equals(ClothingFeet.FormKey)) ?? false) { newWeight = FindWeightCategory("clothesFeet", armor.EditorID) ?? clothesFeetWeight; }
                        if (armor.Keywords?.Any(link => link.FormKey.Equals(ClothingBody.FormKey)) ?? false) { newWeight = FindWeightCategory("clothesBody", armor.EditorID) ?? clothesBodyWeight; }
                    }
                    if (newWeight < 0 || newWeight == armor.Weight) continue;
                    if (Math.Abs(armor.Weight - newWeight) < float.Epsilon) continue;
                    var modifiedArmor = state.PatchMod.Armors.GetOrAddAsOverride(armor);
                    modifiedArmor.Weight *= newWeight;
                }
            }

            // ***** WEAPONS ***** //
            if (weaponWeight >= 0 || ActionableCategoryExists("weapons"))
            {
                foreach (IWeaponGetter weapon in state.LoadOrder.PriorityOrder.WinningOverrides<IWeaponGetter>())
                {
                    var newWeight = FindWeightCategory("weapons", weapon.EditorID) ?? weaponWeight;
                    if (newWeight < 0 || newWeight == weapon.BasicStats?.Weight) continue;
                    if (weapon.BasicStats != null &&
                        Math.Abs(weapon.BasicStats.Weight - newWeight) < float.Epsilon) continue;

                    var modifiedWeapon = state.PatchMod.Weapons.GetOrAddAsOverride(weapon);
                    //var modifiedWeapon = weapon.DeepCopy();
                    modifiedWeapon.BasicStats!.Weight *= newWeight;
                    //state.PatchMod.Weapons.Add(modifiedWeapon);
                }
            }

            // ***** FOODS & POTIONS ***** //
            if (foodWeight >= 0 || potionWeight >= 0 || ActionableCategoryExists("foods") ||
                ActionableCategoryExists("potions") ||
                winesBrandysWeight >= 0 || ActionableCategoryExists("winesBrandys") ||
                breadsFloursWeight >= 0 || ActionableCategoryExists("breadsFlours") ||
                soupsWeight >= 0 || ActionableCategoryExists("soups") ||
                vegetablesWeight >= 0 || ActionableCategoryExists("vegetables") ||
                meatsWeight >= 0 || ActionableCategoryExists("meats") ||
                seafoodsWeight >= 0 || ActionableCategoryExists("seafoods") ||
                drinksWeight >= 0 || ActionableCategoryExists("drinks")
                )
            {
                string[] wines = {"brandy", "wine"};
                string[] breads = { "bread", "flour" };
                string[] soups = { "soup", "stew", "chowder", "porridge" };

                foreach (IIngestibleGetter ingestible in state.LoadOrder.PriorityOrder
                    .WinningOverrides<IIngestibleGetter>())
                {
                    float newWeight = -1;
                    if (ingestible.Keywords?.Any(link => link.FormKey.Equals(VendorItemFood.FormKey)) ?? false)
                    {
                        newWeight = FindWeightCategory("foods", ingestible.EditorID) ?? foodWeight;
                        if (FindItemType(wines, ingestible.EditorID) ?? false) { newWeight = FindWeightCategory("winesAles", ingestible.EditorID) ?? winesBrandysWeight; }
                        else if (FindItemType(breads, ingestible.EditorID) ?? false) { newWeight = FindWeightCategory("breadsFlours", ingestible.EditorID) ?? breadsFloursWeight; }
                        else if ((ingestible.EditorID?.Contains("soup", StringComparison.OrdinalIgnoreCase) ?? false) && (ingestible.EditorID?.Contains("veg", StringComparison.OrdinalIgnoreCase) ?? false))
                        {
                            newWeight = FindWeightCategory("vegetables", ingestible.EditorID) ?? vegetablesWeight;
                        }
                        else if (FindItemType(soups, ingestible.EditorID) ?? false) { newWeight = FindWeightCategory("soups", ingestible.EditorID) ?? soupsWeight; }
                        else if (ingestible.EditorID?.Contains("meat", StringComparison.OrdinalIgnoreCase) ?? false) { newWeight = FindWeightCategory("meats", ingestible.EditorID) ?? meatsWeight; }
                        else if (ingestible.EditorID?.Contains("sea", StringComparison.OrdinalIgnoreCase) ?? false) { newWeight = FindWeightCategory("seafoods", ingestible.EditorID) ?? seafoodsWeight; }
                        else if (ingestible.EditorID?.Contains("drink", StringComparison.OrdinalIgnoreCase) ?? false) { newWeight = FindWeightCategory("drinks", ingestible.EditorID) ?? drinksWeight; }

                    }
                    else
                    {
                        newWeight = FindWeightCategory("potions", ingestible.EditorID) ?? potionWeight;
                    }

                    if (newWeight < 0 || newWeight == ingestible.Weight) continue;
                    if (Math.Abs(ingestible.Weight - newWeight) < float.Epsilon) continue;
                    var modifiedIngestible = state.PatchMod.Ingestibles.GetOrAddAsOverride(ingestible);
                    modifiedIngestible.Weight *= newWeight;
                }
            }

            // ***** MISCELLANEOUS ITEMS ***** //
            if (silverwareWeight >= 0 || ActionableCategoryExists("silverware") ||
                ingotWeight >= 0 || ActionableCategoryExists("ingots") ||
                gemWeight >= 0 || ActionableCategoryExists("gems") ||
                emptyBottlesWeight >= 0 || ActionableCategoryExists("emptyBottles") ||
                animalPeltsWeight >= 0 || ActionableCategoryExists("animalPelts") ||
                animalPartWeight >= 0 || ActionableCategoryExists("animalParts") ||
                animalHideWeight >= 0 || ActionableCategoryExists("animalHides") ||
                clutterWeight >= 0 || ActionableCategoryExists("clutter") ||
                toolsWeight >= 0 || ActionableCategoryExists("tools") ||
                tentsWeight >= 0 || ActionableCategoryExists("tents") ||
                miscWeight >= 0 || ActionableCategoryExists("miscItems"))
            {
                foreach (IMiscItemGetter item in state.LoadOrder.PriorityOrder
                    .WinningOverrides<IMiscItemGetter>())
                {
                    state.LinkCache.TryResolve<IKeywordGetter>(Campfire.MakeFormKey(isCampfireTentItem.Id), out var key);
                    float newWeight = -1;
                    if (item.Keywords?.Any(link => link.FormKey.Equals(GiftUniversallyValuable.FormKey)) ?? false)
                    {
                        newWeight = FindWeightCategory("silverware", item.EditorID) ?? silverwareWeight;
                    }
                    else if (item.Keywords?.Any(link => link.FormKey.Equals(VendorItemOreIngot.FormKey)) ?? false)
                    {
                        newWeight = FindWeightCategory("ingots", item.EditorID) ?? ingotWeight;
                    }
                    else if (item.Keywords?.Any(link => link.FormKey.Equals(VendorItemGem.FormKey)) ?? false)
                    {
                        newWeight = FindWeightCategory("gems", item.EditorID) ?? gemWeight;
                    }
                    else if (item.EditorID?.Contains("bottle", StringComparison.OrdinalIgnoreCase) ?? false) 
                    { 
                        newWeight = FindWeightCategory("emptyBottles", item.EditorID) ?? emptyBottlesWeight; 
                    }
                    else if (item.Keywords?.Any(link => link.FormKey.Equals(VendorItemAnimalPart.FormKey)) ?? false)
                    {
                        newWeight = FindWeightCategory("animalParts", item.EditorID) ?? animalPartWeight;
                    }
                    else if (item.EditorID?.Contains("pelt", StringComparison.OrdinalIgnoreCase) ?? false) 
                    {
                        newWeight = FindWeightCategory("pelts", item.EditorID) ?? animalPeltsWeight; 
                    }
                    else if (item.Keywords?.Any(link => link.FormKey.Equals(VendorItemAnimalHide.FormKey)) ?? false)
                    {
                        newWeight = FindWeightCategory("animalHides", item.EditorID) ?? animalHideWeight;
                    }
                    else if (item.Keywords?.Any(link => link.FormKey.Equals(VendorItemClutter.FormKey)) ?? false)
                    {
                        newWeight = FindWeightCategory("clutter", item.EditorID) ?? clutterWeight;
                    }
                    else if (item.Keywords?.Any(link => link.FormKey.Equals(VendorItemTool.FormKey)) ?? false)
                    {
                        newWeight = FindWeightCategory("tools", item.EditorID) ?? toolsWeight;
                    }
                    else if (item.Keywords?.Any(link => link.FormKey == key?.FormKey) ?? false)
                    {
                        newWeight = FindWeightCategory("tents", item.EditorID) ?? tentsWeight;
                    }
                    else
                    {
                        newWeight = FindWeightCategory("miscItems", item.EditorID) ?? miscWeight;
                    }
                    if (newWeight < 0 || newWeight == item.Weight) continue;
                    if (Math.Abs(item.Weight - newWeight) < float.Epsilon) continue;
                    var modifiedItem = state.PatchMod.MiscItems.GetOrAddAsOverride(item);
                    modifiedItem.Weight *= newWeight;
                }
            }
            
            SynthesisLog("Done patching weights!", true);
        }
    }
}